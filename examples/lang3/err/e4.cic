@datatype Nat : Type {
  zero: Nat
  add1: (prev: Nat) -> Nat
}

Nat_ind : (target: Nat) -> (motive: (target: Nat) -> Type) ->
  (base: motive(Nat.zero)) ->
  (step: (prev: Nat) -> (almost: motive(prev)) -> motive(Nat.add1(prev))) ->
  motive(target)
Nat_ind = {
  (Nat.zero) => (motive) => (base) => (step) => base
  (Nat.add1(prev)) => (motive) => (base) => (step) =>
    step(prev)(Nat_ind(prev)(motive)(base)(step))
}

Nat_rec : (target: Nat) -> (T: Type) -> (base: T) -> (step: (prev: Nat) -> (almost: T) -> T) -> T
Nat_rec = (target) => (T) => (base) => (step) => Nat_ind(target)((_target) => T)(base)(step)

// NOTE The following is the type of `Nat_iter`, not the type of `Nat_which`.
Nat_which : (target: Nat) -> (T: Type) -> (base: T) -> (step: (almost: T) -> T) -> T
Nat_which = (target) => (T) => (base) => (step) =>
  Nat_rec(target)(T)(base)((prev) => (_almost) => step(prev))

Nat_iter : (target: Nat) -> (T: Type) -> (base: T) -> (step: (almost: T) -> T) -> T
Nat_iter = (target) => (T) => (base) => (step) =>
  Nat_rec(target)(T)(base)((_prev) => (almost) => step(almost))
