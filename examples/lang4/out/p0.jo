@claim swap [ 'A 'B -> 'B 'A ]
@define swap [ (b) (a) b a ]

@claim dup [ 'A -> 'A 'A ]
@define dup [ (a) a a ]

@claim drop [ 'A -> ]
@define drop [ (a) ]

@claim apply [ 'A [ 'A -> 'B ] -> 'B ]
@define apply [ (f) f! ]

@show [ "a" "b" [ dup ] ]
@show [ "a" [ drop ] apply ]
@show [ "a" [ dup dup ] apply ]
@show [ "a" [ dup dup ] ! ]
@show [ "a" "b" [ (_) dup ] apply ]

@show [ 'a 'b [ dup ] ]
@show [ 1 2 [ dup ] apply ]

@show [ 3.14 dup ]

@claim id [ [ 'A -> 'B ] -> [ 'A -> 'B ] ]
@define id [ (f) f ]

// @claim id [ 'A -> 'A ]
// @define id [ (f) f ]

// @claim unit [ T: Type x: T -> T List ]
// @define unit [ (x) @list [ x ] ]

// @claim map [ 'A List [ 'A -> 'B ] -> 'B List ]
// @define map [ (x) @list [ x ] ]

// @datatype List [ A: Type -> Type ] {
//   null [ A List ]
//   cons [ A List A -> A List ]
// }

// @claim List.append [ A List A List -> A List ]
// @define List.append [
//   (y) @match {
//     List.null [ y ]
//     List.cons [ (head) (tail) y tail List.append head List.cons ]
//   }
// ]

// @claim List.map [ A List [ A -> B ] -> B List ]
// @define List.map [
//   (f) (x) x @match {
//     List.null [ x ]
//     List.cons [ (head) [f] List.map head f List.cons ]
//   }
// ]
