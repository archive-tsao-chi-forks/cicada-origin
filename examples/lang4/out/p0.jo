(claim swap ['A 'B] ['B 'A])
(define swap [(let b) (let a) b a])

(claim dup ['A] ['A 'A])
(define dup [(let a) a a])

(claim drop ['A] [])
(define drop [(let a)])

// TODO
// (claim apply (-> ['A (-> ['A] ['B])] ['B]))
// (define apply [(let f) f])

(show ["a" "b" [dup]])
