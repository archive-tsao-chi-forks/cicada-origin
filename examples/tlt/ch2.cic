// 2. Doin' What Comes Naturally

@def flavored_lentils
@the @arrow String @pair String String
@fn flavor @cons flavor "lentils"

@def garlic_flavored_lentils
@the @pair String String
flavored_lentils("garlic")

@def id
@the @arrow String String
@fn x x

@def T
@the Type
@pair String (String) -> String

@def id_in_pair
@the (x: String) -> T
(x) => @cons x (x) => x

@show @the T id_in_pair("x")

// The x occur in `(x) => x` should not be
// effected by the substitution of outer `x`,
// and `(x) => x` is equivalent to `(y) => y`,

@show @the Equal(T, id_in_pair("x"), @cons "x" (y) => y)
same

@show @the Equal(@arrow Nat @pair Nat Nat, (x) => @cons x x, (y) => @cons y y)
same

@show @the Equal((Nat) -> Nat, (y) => car(@the @pair Nat Nat @cons y y), (x) => x)
same

@show @the Equal((@pair Nat Nat) -> Nat, (y) => car(y), (x) => car(x))
same

@def vegetables
@the @pair String String
@cons "celery" "carrot"

@show @the Equal(@pair String String, vegetables, @cons car(vegetables) cdr(vegetables))
same

@def nat_rec
@the (target: Nat) -> (T: Type) -> (base: T) -> (step: (prev: Nat) -> (almost: T) -> T) -> T
(target) => (T) => (base) => (step) =>
  nat_ind(target, (_) => T, base, step)

@def nat_rec
@the @pi target Nat @pi T Type @pi base T @pi step @pi prev Nat @pi almost T T T
@fn target @fn T @fn base @fn step
nat_ind(target, @fn _ T, base, step)

@def nat_which
@the (target: Nat) -> (T: Type) -> (base: T) -> (step: (prev: Nat) -> T) -> T
(target) => (T) => (base) => (step) =>
  nat_ind(target, (_) => T, base, (prev) => (_almost) => step(prev))

@def naught_or_more
@the @arrow Nat String
@fn n
// nat_which(n)(String)("naught")((_prev) => "more")
@ap @ap @ap @ap nat_which n String "naught" @fn _prev "more"

@show @the Equal(String, naught_or_more(0), "naught")
same

@show @the Equal(String, naught_or_more(1), "more")
same

@show @the Equal(String, naught_or_more(4), "more")
same

@show
@the @pair Type Type
@cons String String

@def Pear
@the Type
@pair Nat Nat

@show @the Pear @cons 1 2
