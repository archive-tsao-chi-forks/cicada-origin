{
  one = add1(zero)
  two = add1(one)
  three = add1(two)
  add = (x, y) => Nat.ind(y, (_) => Nat, x, (prev, almost) => add1(almost))
      : (Nat) -> (Nat) -> Nat
  mul = (x, y) => Nat.ind(y, (_) => Nat, zero, (prev, almost) => add(almost, x))
      : (Nat) -> (Nat) -> Nat
  pow = (x, y) => Nat.ind(y, (_) => Nat, one, (prev, almost) => mul(almost, x))
      : (Nat) -> (Nat) -> Nat
  eight = {
    four = add(two, two)
    add(four, four)
  }
  _ = same : Equal(Nat, eight, pow(two, three))
  _
}
