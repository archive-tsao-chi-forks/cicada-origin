@datatype Nat : Type {
  zero: Nat
  add1: (prev: Nat) -> Nat
}

zero = Nat.zero
one = Nat.add1(zero)
two = Nat.add1(one)
three = Nat.add1(two)
four = Nat.add1(three)
five = Nat.add1(four)
six = Nat.add1(five)
seven = Nat.add1(six)
eight = Nat.add1(seven)
nine = Nat.add1(eight)
ten = Nat.add1(nine)

@datatype Bool : Type {
  true: Bool
  false: Bool
}

Nat_ind : (target: Nat) -> (motive: (target: Nat) -> Type) ->
  (base: motive(Nat.zero)) ->
  (step: (prev: Nat) -> (almost: motive(prev)) -> motive(Nat.add1(prev))) ->
  motive(target)
Nat_ind = {
  (Nat.zero) => (motive) => (base) => (step) => base
  (Nat.add1(prev)) => (motive) => (base) => (step) =>
    step(prev)(Nat_ind(prev)(motive)(base)(step))
}

Nat_rec : (target: Nat) -> (T: Type) ->
  (base: T) ->
  (step: (prev: Nat) -> (almost: T) -> T) ->
  T
Nat_rec = (target) => (T) => (base) => (step) =>
  Nat_ind(target)((_target) => T)(base)(step)

Nat_iter : (target: Nat) -> (T: Type) -> (base: T) -> (step: (almost: T) -> T) -> T
Nat_iter = (target) => (T) => (base) => (step) =>
  Nat_rec(target)(T)(base)((_prev) => (almost) => step(almost))

add : (Nat) -> (Nat) -> Nat
add = (x) => (y) => Nat_iter(y)(Nat)(x)((almost) => Nat.add1(almost))

@show add(zero)(zero)
@show add(zero)(one)
@show add(one)(zero)
@show add(one)(one)
@show add(one)(two)
@show add(two)(one)
@show add(two)(two)

gauss : (Nat) -> Nat
gauss = (n) => Nat_rec(n)(Nat)(Nat.zero)((prev) => (almost) => add(Nat.add1(prev))(almost))

@show gauss(zero)
@show gauss(one)
@show gauss(two)
@show gauss(three)
@show gauss(four)
@show gauss(five)
@show gauss(six)
