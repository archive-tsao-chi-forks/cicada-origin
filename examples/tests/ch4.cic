// 4. Easy as Pie

@def Pair_elim
@the (A: Type) -> (D: Type) -> (X: Type) ->
  (pair: Pair(A, D)) ->
  (maker: (A) -> (D) -> X) ->
  X
(A) => (D) => (X) =>
  (pair) => (maker) =>
  maker(car(pair))(cdr(pair))

@def flip
@the (A: Type) -> (D: Type) ->
  (pair: Pair(A, D)) ->
  Pair(D, A)
(A) => (D) =>
  (pair) =>
  cons(cdr(pair), car(pair))

@show flip(Nat)(String)(cons(123, "abc"))
@show flip(String)(Nat)(flip(Nat)(String)(cons(123, "abc")))

@show @the Equal(Type,
  (A: Type) -> (D: Type) -> (pair: Pair(A, D)) -> Pair(D, A),
  (Lemon: Type) -> (Meringue: Type) -> (Pair(Lemon, Meringue)) -> Pair(Meringue, Lemon))
same

@show @the Equal(Type,
  (A: Type) -> (D: Type) -> (Pair(A, D)) -> Pair(D, A),
  (A: Type) -> (D: Type) ->
    (Pair(
      car(@the Pair(Type, Type) cons(A, D)),
      cdr(@the Pair(Type, Type) cons(A, D)))) ->
    Pair(D, A))
same

@def swap @the (Pair(Nat, String)) -> Pair(String, Nat)
(pair) =>
  Pair_elim(Nat)(String)(Pair(String, Nat))
  (pair)
  ((a) => (d) => cons(d, a))

@show swap(cons(123, "abc"))

@def twin @the (Y: Type) -> (Y) -> Pair(Y, Y)
  (Y) => (x) => cons(x, x)

@show twin(Nat)(123)
@show twin(String)("abc")
