class category_t {
  object_t: type
  morphism_t(object_t, object_t): type
  id(a: object_t): morphism_t(a, a)
  compose[a: object_t, b: object_t, c: object_t](
    f: morphism_t(a, b),
    g: morphism_t(b, c),
  ): morphism_t(a, c)
  left_id[a: object_t, b: object_t](f: morphism_t(a, b)): eqv_t(compose(id(a), f), f)
  right_id[a: object_t, b: object_t](f: morphism_t(a, b)): eqv_t(compose(f, id(b)), f)
  associative[a: object_t, b: object_t, c: object_t, d: object_t](
    f: morphism_t(a, b),
    g: morphism_t(b, c),
    h: morphism_t(c, d),
  ): eqv_t(compose(f, compose(g, h)), compose(compose(f, g), h))
}

class monomorphism_t {
  cat: category_t
  mono: cat.morphism_t(a, b)
  right_cancelable(
    f: cat.morphism_t(c, a),
    g: cat.morphism_t(c, a),
    eqv_t(cat.compose(f, mono), cat.compose(g, mono)),
  ): eqv_t(f, g)
}

class epimorphism_t {
  cat: category_t
  epi: cat.morphism_t(a, b)
  left_cancelable(
    f: cat.morphism_t(b, c),
    g: cat.morphism_t(b, c),
    eqv_t(cat.compose(epi, f), cat.compose(epi, g)),
  ): eqv_t(f, g)
}

class isomorphism_t {
  cat: category_t
  iso: cat.morphism_t(a, b)
  inv: cat.morphism_t(b, a)
  left_inverse: left_inverse_t(cat, iso, inv)
  right_inverse: right_inverse_t(cat, iso, inv)
}

left_inverse_t(
  cat: category_t,
  f: cat.morphism_t(a, b),
  g: cat.morphism_t(a, b),
): type = {
  eqv_t(cat.compose(f, g), cat.id(a))
}

right_inverse_t(
  cat: category_t,
  f: cat.morphism_t(a, b),
  g: cat.morphism_t(a, b),
): type = {
  eqv_t(cat.compose(g, f), cat.id(b))
}
