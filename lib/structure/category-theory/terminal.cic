develop category_t {
  class terminal_t extends object_t {
    morphism(x: object_t): morphism_t(x, this)
    morphism_unique(
      f: morphism_t(x, this),
      g: morphism_t(x, this),
    ): eqv_t(morphism_t(x, this), f, g)
  }

  terminal_iso(x: terminal_t, y: terminal_t): iso_t(x, y) = {
    f = x.morphism(y)
    g = y.morphism(x)
    new iso_t(x, y) extends f {
      inverse = g
      left_inverse = x.morphism_unique(compose(f, g), id(x))
      right_inverse = y.morphism_unique(compose(g, f), id(y))
    }
  }

  terminal_iso_unique[x: terminal_t, y: terminal_t](
    f: iso_t(x, y),
    g: iso_t(x, y),
  ): eqv_t(iso_t(x, y), f, g) = {
    y.morphism_unique(f, g)
  }
}
