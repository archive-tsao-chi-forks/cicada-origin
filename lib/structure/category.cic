class category_t {
  object_t: type
  morphism_t(object_t, object_t): type
  id(a: object_t): morphism_t(a, a)
  compose[a: object_t, b: object_t, c: object_t](
    f: morphism_t(a, b),
    g: morphism_t(b, c),
  ): morphism_t(a, c)
  id_left[a: object_t, b: object_t](f: morphism_t(a, b)): eqv_t(compose(id(a), f), f)
  id_right[a: object_t, b: object_t](f: morphism_t(a, b)): eqv_t(compose(f, id(b)), f)
  compose_associative[a: object_t, b: object_t, c: object_t, d: object_t](
    f: morphism_t(a, b),
    g: morphism_t(b, c),
    h: morphism_t(c, d),
  ): eqv_t(compose(f, compose(g, h)), compose(compose(f, g), h))
}

develop category_t {
  class mono_t {
    morphism[a: object_t, b: object_t]: morphism_t(a, b)
    right_cancelable[c: object_t](
      f: morphism_t(c, a),
      g: morphism_t(c, a),
      eqv_t(compose(f, morphism), compose(g, morphism)),
    ): eqv_t(f, g)
  }

  class epi_t {
    morphism[a: object_t, b: object_t]: morphism_t(a, b)
    left_cancelable[c: object_t](
      f: morphism_t(b, c),
      g: morphism_t(b, c),
      eqv_t(compose(morphism, f), compose(morphism, g)),
    ): eqv_t(f, g)
  }

  class iso_t {
    morphism[a: object_t, b: object_t]: morphism_t(a, b)
    inverse[a: object_t, b: object_t]: morphism_t(b, a)
    inverse_left: eqv_t(compose(morphism, inverse), id(a))
    inverse_right: eqv_t(compose(inverse, morphism), id(b))
  }
}
