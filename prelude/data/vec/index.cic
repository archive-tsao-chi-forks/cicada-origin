import { Nat } from "../nat"

datatype Vec(A: Type, length: Nat) {
  null: Vec(A, zero)
  @given n: Nat
  cons(head: A, tail: Vec(A, n)): Vec(A, Nat.succ(n))
}

@given A: Type
@given m: Nat, n: Nat
append(x: Vec(A, m), y: Vec(A, n)): Vec(A, Nat.add(m, n))
append(null, y) = y
append(cons(head, tail), y) = cons(head, append(tail, y))

@given A: Type, B: Type
@given n: Nat
map(x: Vec(A, n), f(A): B): Vec(B, n)
map(null) = null
map(cons(head, tail)) = cons(f(head), map(tail, f))

three_zeros: Vec(Nat, Nat.three) =
  cons(Nat.zero, cons(Nat.zero, cons(Nat.zero, null)))

three_ones: Vec(Nat, Nat.three) =
  cons(Nat.one, cons(Nat.one, cons(Nat.one, null)))
