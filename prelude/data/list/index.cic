import Nat from "../nat"

datatype List(A: Type) {
  null: List(A)
  cons(head: A, tail: List(A)): List(A)
}

length(x: List): Nat
length(null) = zero
length(cons(_head, tail)) = succ(length(tail))

@given A: Type
append(x: List(A), y: List(A)): List(A)
append(null, y) = y
append(cons(head, tail), y) = cons(head, append(tail, y))

@given A: Type, B: Type
map(x: List(A), f(A): B): List(B)
map(null, f) = null
map(cons(head, tail), f) = cons(f(head), map(tail, f))

three_zeros: List(Nat) =
  cons(zero, cons(zero, cons(zero, null)))

three_ones: List(Nat) =
  cons(one, cons(one, cons(one, null)))
