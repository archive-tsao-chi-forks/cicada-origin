import * from "../simple/bool.cic"
import * from "../simple/nat.cic"

data List(A : Type) {
  Null : List(A)
  Cons : { head : A; tail : List(A) -> List(A) }
}

list_length : { x : List -> Nat } = {
  switch x {
    case null => zero
    case cons => succ(list_length(x.tail))
  }
}

list_append : {
  # A : Type
  x, y : List(A)
  ---------
  List(A)
} = {
  switch x {
    case null => y
    case cons => cons(x.head, list_append(x.tail, y))
  }
}

list_map : {
  # A, B : Type
  f : { A -> B }
  x : List(A)
  ---------
  List(B)
} = {
  switch x {
    case null => null
    case cons => cons(f(x.head), list_map(f, x.tail))
  }
}

three_zeros : List(Nat) = {
  cons(zero, cons(zero, cons(zero, null)))
}

three_ones : List(Nat) = {
  cons(one, cons(one, cons(one, null)))
}
