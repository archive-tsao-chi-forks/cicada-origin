import * from "./bool.cic"

data Nat {
  Zero: Nat
  Succ: { prev: Nat -> Nat }
}

add: { x, y: Nat -> Nat }
add(Zero, y) = y
add(Succ(prev), y) = Succ(add(prev, y))

add: { x, y: Nat -> Nat } = x match {
  Zero => y
  Succ(prev) => Succ(add(prev, y))
}

mul: { x, y: Nat -> Nat } = {
  x match {
    zero => zero
    succ => add(y, mul(x.prev, y))
  }
}

factorial: { x: Nat -> Nat } = {
  x match {
    zero => succ(zero)
    succ => mul(x, factorial(x.prev))
  }
}

one: Nat = succ(zero)
two: Nat = succ(one)
three: Nat = succ(two)
four: Nat = succ(three)
five: Nat = succ(four)
six: Nat = succ(five)
seven: Nat = succ(six)
eight: Nat = succ(seven)
nine: Nat = succ(eight)
ten: Nat = succ(nine)

@assert_eq add(one, one) two
@assert_eq add(two, two) four
@assert_eq add(three, three) six

@assert_eq mul(one, one) one
@assert_eq mul(two, two) four
@assert_eq mul(three, three) nine

@assert_eq factorial(one) one
@assert_eq factorial(two) two
@assert_eq factorial(three) six

even_p: { x: Nat -> Bool } = {
  x match {
    zero => True
    succ => x.prev match {
      zero => False
      succ => even_p(x.prev.prev)
    }
  }
}

@assert_eq even_p(one) False
@assert_eq even_p(two) True
@assert_eq even_p(three) False
@assert_eq even_p(four) True
@assert_eq even_p(five) False
