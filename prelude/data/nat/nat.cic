package prelude.data.nat.Nat

import prelude.data.bool.Bool

data Nat {
  Zero: Nat
  Succ(prev: Nat): Nat
}

add(x: Nat, y: Nat): Nat
add(Zero, y) = y
add(Succ(prev), y) = Succ(add(prev, y))

mul(x: Nat, y: Nat): Nat
mul(Zero, y) = Zero
mul(Succ(prev), y) = add(y, mul(prev, y))

factorial(x: Nat): Nat
factorial(Zero) = Succ(Zero)
factorial(Succ(prev), y) = mul(x, factorial(prev))

zero: Nat = Zero
one: Nat = Succ(zero)
two: Nat = Succ(one)
three: Nat = Succ(two)
four: Nat = Succ(three)
five: Nat = Succ(four)
six: Nat = Succ(five)
seven: Nat = Succ(six)
eight: Nat = Succ(seven)
nine: Nat = Succ(eight)
ten: Nat = Succ(nine)

// @assert_eq add(one, one) two
// @assert_eq add(two, two) four
// @assert_eq add(three, three) six

// @assert_eq mul(one, one) one
// @assert_eq mul(two, two) four
// @assert_eq mul(three, three) nine

// @assert_eq factorial(one) one
// @assert_eq factorial(two) two
// @assert_eq factorial(three) six

even_p(x: Nat): Bool
even_p(Zero) = Bool.True
even_p(Succ(Zero)) = Bool.False
even_p(Succ(Succ(prev))) = even_p(prev)

// @assert_eq even_p(one) False
// @assert_eq even_p(two) True
// @assert_eq even_p(three) False
// @assert_eq even_p(four) True
// @assert_eq even_p(five) False
