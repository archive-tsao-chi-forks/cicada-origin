class Terminal {
  cat: Category
  object: cat.Object
  morphism(x: cat.Object): cat.Morphism(x, object)

  morphism_unique(
    # x: cat.Object,
    f g: cat.Morphism(x, object),
  ): TheEqual(cat.Morphism(x, object), f, g)
}

// TODO

terminal_iso(
  # cat: Category,
  x y: Terminal(cat),
): Category.Isomorphism(cat, x.object, y.object) = {
  f = x.morphism(y.object)
  g = y.morphism(x.object)
  new Category.Isomorphism(
    morphism = f,
    inverse = g,
    inverse_left = x.morphism_unique(cat.compose(f, g), cat.id(x.object)),
    inverse_right = y.morphism_unique(cat.compose(g, f), cat.id(y.object)))
}

terminal_iso_unique(
  # cat: Category,
  # x y: Terminal(cat),
  f g: Category.Isomorphism(cat, x.object, y.object),
): TheEqual(Isomorphism(cat, x.object, y.object), f, g) {
  iso = new Isomorphism(
    morphism = y.morphism_unique(f, g),
    inverse = y.morphism_unique(f, g))
  same(iso)
}
