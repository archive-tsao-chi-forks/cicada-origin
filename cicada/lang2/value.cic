@module lang2

@datatype Closure {
  closure(env: Map(String, Value), name: String, ret: Exp): Closure
}

@datatype Value {
  pi(arg_t: Value, closure: Closure): Value
  fn(closure: Closure): Value

  sigma(car_t: Value, closure: Closure): Value
  cons(car: Value, cdr: Value): Value

  // | nat
  // | zero
  // | add1
  // | equal
  // | same
  // | trivial
  // | sole
  // | absurd
  // | str
  // | quote

  type: Value

  reflection(t: Value, neutral: Neutral): Value
}

@datatype Neutral {
  v(name: String): Neutral

  ap(target: Neutral, arg: Normal): Neutral

  car(target: Neutral): Neutral
  cdr(target: Neutral): Neutral

  // | nat_ind | replace | absurd_ind
}

@datatype Normal {
  normal(t: Value, value: Value): Normal
}
