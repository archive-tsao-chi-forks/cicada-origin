// in natural deduction:

@datatype Pair(A: Type, B: Type) {

  // fst: A
  // snd: B
  // ---------- intro
  // Pair(A, B)

  intro(fst: A, snd: B): Pair(A, B)
}

// @given A: Type, B: Type
// target: Pair(A, B)
// ------------------ Pair.elim_fst
// A

Pair.elim_fst(Pair(A, B)): A
Pair.elim_fst(Pair.intro(fst, snd)) = fst

// @given A: Type, B: Type
// target: Pair(A, B)
// ------------------ Pair.elim_snd
// B

Pair.elim_snd(Pair(A, B)): B
Pair.elim_snd(Pair.intro(fst, snd)) = snd

// in sequent calculus:

// @given A: Type, B: Type
// fst_f: A -> C
// --------------- Pair.left_fst
// Pair(A, B) -> C

Pair.left_fst(A -> C): Pair(A, B) -> C
Pair.left_fst(fst_f) = (Pair.intro(fst, snd)) => fst_f(fst)

// @given A: Type, B: Type
// snd_f: B -> C
// --------------- Pair.left_snd
// Pair(A, B) -> C

Pair.left_snd(B -> C): Pair(A, B) -> C
Pair.left_snd(snd_f) = (Pair.intro(fst, snd)) => snd_f(snd)
