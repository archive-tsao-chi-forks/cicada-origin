@module lang1

@export datatype.Map

@judgment Check(ctx: Map(String, Ty), exp: Exp, t: Ty) {
  // NOTE Formal arguments of type constructor are considered as given to data constructors.
  // - For examples, the above `ctx`, `exp`, `t` can be viewed as given.

  // NOTE What ever occurs in return type of data constructor, can be given by unification.
  // - Such as the following given `name`.
  Check(ctx, Exp.v(name), t)
  -------------------------------- v
  lookup: Map.Lookup(ctx, name, t)

  Check(ctx, Exp.fn(name, ret), Ty.arrow(arg_t, ret_t))
  ------------------------------------------------------- fn
  ret_ck: Check(Map.extend(ctx, name, arg_t), ret, ret_t)

  Check(ctx, Exp.ap(target, arg), ret_t)
  -------------------------------------- ap
  target_ck: Check(ctx, target, Ty.arrow(arg_t, ret_t))
  arg_ck: Check(ctx, arg, arg_t)

  Check(ctx, Exp.let(name, exp, body), t)
  --------------------------------------- let
  exp_ck: Check(ctx, exp, exp_t)
  body_ck: Check(Map.extend(ctx, name, exp_t), body, t)

  Check(ctx, Exp.zero, Ty.nat)
  ---------------------------- zero

  Check(ctx, Exp.add1(prev), Ty.nat)
  ---------------------------------- add1
  prev_ck: Check(ctx, prev, Ty.nat)

  Check(ctx, Exp.rec(t, target, base, step), t)
  --------------------------------------------- rec
  target_ck: Check(ctx, target, Ty.nat)
  base_ck: Check(ctx, base, t)
  step_ck: Check(ctx, base, Ty.arrow(Ty.nat, Ty.arrow(t, t)))

  Check(ctx, Exp.the(t, exp), t)
  ------------------------------ the
  Check(ctx, exp, t)
}
