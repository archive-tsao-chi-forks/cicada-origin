@module lang1

@import datatype.Map

@judgment Check(ctx: Map(String, Ty), exp: Exp, t: Ty) {
  // NOTE Formal arguments of type constructor are considered as given to data constructors.
  // - For examples, the above `ctx`, `exp`, `t` can be viewed as given.

  // NOTE What ever occurs in return type of data constructor, can be given by unification.
  // - Such as the following given `name`.
  @given name: String
  lookup: Map.Lookup(ctx, name, t)
  -------------------------------- v
  Check(ctx, Exp.v(name), t)

  @given name: String, ret: Exp
  @given arg_t: Ty, ret_t: Ty
  ret_ck: Check(Map.extend(ctx, name, arg_t), ret, ret_t)
  ------------------------------------------------------- fn
  Check(ctx, Exp.fn(name, ret), Ty.arrow(arg_t, ret_t))

  @given target: Exp
  @given arg: Exp
  @given ret_t: Ty
  arg_t: Ty
  target_ck: Check(ctx, target, Ty.arrow(arg_t, ret_t))
  arg_ck: Check(ctx, arg, arg_t)
  -------------------------------------- ap
  Check(ctx, Exp.ap(target, arg), ret_t)

  TODO
  ----------------------------------- suite
  TODO

  ---------------------------- zero
  Check(ctx, Exp.zero, Ty.nat)

  @given prev: Exp
  prev_ck: Check(ctx, prev, Ty.nat)
  ---------------------------------- add1
  Check(ctx, Exp.add1(prev), Ty.nat)

  TODO
  ----------------------------------- rec
  TODO
}
