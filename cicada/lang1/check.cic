@module lang1

@import datatype.Map

// 假设在 datatype 中定义数据构造子时，
// 其类型所代表的是纯逻辑式编程。
// 即所有的关系都是可逆的。

// 双向的类型检查在于，关系的单值性，即关系是否是函数。
// 具体对于 Check 而言，假设第三个参数 t 为输出。
// 注意关系是函数，与有算法计算这个函数还差一步。

// 关于双向类型检查与函数单值性，有一个有趣的 user story。
// 首先要知道 Check 对第三个参数 t 的单值性，将给出函数 infer。
// 假设我想实现函数 check 来自动生成关系 Check 的证明。
// 一、我发现只有当我能 infer ap 的 target，才能 check ap，
// 二、而且，额外地，当我能 infer ap 的 target，我就不光能 check ap，并且也能 infer ap，
// 三、为了 infer ap 的 target 我必须能够 infer fn，
// 四、fn 的 Check 对其第三个参数 t 不具有单值性，因此无法实现 infer，
// 五、为了 fn 而加 annotation 这个新 Exp，并且把类型检查 judgment 分为两个方向的 infer 与 check。

@judgment Check(ctx: Map(String, Ty), exp: Exp, t: Ty) {
  // NOTE Formal arguments of type constructor are considered as given to data constructors.
  // - For examples, the above `ctx`, `exp`, `t` can be viewed as given.

  // NOTE What ever occurs in return type of data constructor, can be given by unification.
  // - Such as the following given `name`.
  @given name: String
  lookup: Map.Lookup(ctx, name, t)
  -------------------------------- v
  Check(ctx, Exp.v(name), t)

  @given name: String, ret: Exp
  @given arg_t: Ty, ret_t: Ty
  ret_ck: Check(Map.extend(ctx, name, arg_t), ret, ret_t)
  ------------------------------------------------------- fn
  Check(ctx, Exp.fn(name, ret), Ty.arrow(arg_t, ret_t))

  @given target: Exp
  @given arg: Exp
  @given ret_t: Ty
  arg_t: Ty
  target_ck: Check(ctx, target, Ty.arrow(arg_t, ret_t))
  arg_ck: Check(ctx, arg, arg_t)
  -------------------------------------- ap
  Check(ctx, Exp.ap(target, arg), ret_t)

  TODO
  ----------------------------------- suite
  TODO

  ---------------------------- zero
  Check(ctx, Exp.zero, Ty.nat)

  @given prev: Exp
  prev_ck: Check(ctx, prev, Ty.nat)
  ---------------------------------- add1
  Check(ctx, Exp.add1(prev), Ty.nat)

  TODO
  ----------------------------------- rec
  TODO
}
