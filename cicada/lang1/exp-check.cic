@module lang1

// -- CHECK CONSTRUCTORS --

Exp.check(Map(String, Ty), Exp, Ty): Trivial

Exp.check(ctx, Exp.fn(name, ret), Ty.arrow(arg_t, ret_t)) =
  Exp.check(Map.extend(ctx, name, arg_t), ret, ret_t)

// - 注意 let 不是 constructor 也不是 eliminator，
//   而是反向的 beta reduction。
// - let 应该被 check 而不应该被 infer，
//   因为我们不想要求末尾的 ret 可以被 infer。
//   我们想要写成 { x = a : A; y } : B
//   而不想要写成 { x = a : A; y : B }
//   - 也许这是一个一般原则？
//     所有可以被写在外面的类型注解（type annotation）
//     都应该被写在外面？

Exp.check(ctx, Exp.let(name, exp, ret), t) = {
  Exp.infer(ctx, exp) >>> exp_t
  Exp.check(Map.extend(ctx, name, exp_t), ret, t)
}

Exp.check(ctx, Exp.suite(List.null, ret), t) =
  Exp.check(ctx, ret, t)

Exp.check(ctx, Exp.suite(List.cons({ name, exp }, defs), ret), t) = {
  Exp.infer(ctx, exp) >>> exp_t
  Exp.check(Map.extend(ctx, name, exp_t), Exp.suite(defs, ret), t)
}

Exp.check(ctx, Exp.zero, Ty.nat) = Trivial.sole

Exp.check(ctx, Exp.add1(prev), Ty.nat) =
  Exp.check(ctx, prev, Ty.nat)

Exp.check(ctx, exp, t) = {
  Exp.infer(ctx, exp) >>> u
  Ty.equal(t, u)
}

// -- INFER VARIABLE AND ELIMINATORS --

Exp.infer(Map(String, Ty), Exp): Ty

Exp.infer(ctx, Exp.v(name)) = Map.lookup(ctx, name)

// 为 eliminator 实现 infer 的模式是：
// - target 通常要 infer；
// - 而其他元素要 check。

Exp.infer(ctx, Exp.ap(target, arg)) = {
  Exp.infer(ctx, target) >>> Ty.arrow(arg_t, ret_t)
  Exp.check(ctx, arg, arg_t)
  ret_t
}

Exp.infer(ctx, Exp.rec(t, target, base, step)) = {
  Exp.infer(ctx, target, Ty.nat)
  Exp.infer(ctx, base, t)
  Exp.infer(ctx, step, Ty.arrow(Ty.nat, Ty.arrow(t, t)))
  t
}

Exp.infer(ctx, Exp.the(t, exp)) = {
  Exp.check(ctx, exp, t)
  t
}
