@module lang1

@judgment Check(ctx: Map(String, Ty), exp: Exp, t: Ty) {
  Check(ctx, Exp.v(name), t)
  -------------------------- v
  Map.Lookup(ctx, name, t)

  Check(ctx, Exp.fn(name, ret), Ty.arrow(arg_t, ret_t))
  ----------------------------------------------------- fn
  Check(Map.extend(ctx, name, arg_t), ret, ret_t)

  Check(ctx, Exp.ap(target, arg), ret_t)
  -------------------------------------- ap
  Check(ctx, target, Ty.arrow(arg_t, ret_t))
  Check(ctx, arg, arg_t)

  Check(ctx, Exp.let(name, exp, ret), t)
  --------------------------------------- let
  Check(ctx, exp, exp_t)
  Check(Map.extend(ctx, name, exp_t), ret, t)

  Check(ctx, Exp.zero, Ty.nat)
  ---------------------------- zero

  Check(ctx, Exp.add1(prev), Ty.nat)
  ---------------------------------- add1
  Check(ctx, prev, Ty.nat)

  Check(ctx, Exp.rec(t, target, base, step), t)
  --------------------------------------------- rec
  Check(ctx, target, Ty.nat)
  Check(ctx, base, t)
  Check(ctx, step, Ty.arrow(Ty.nat, Ty.arrow(t, t)))

  Check(ctx, Exp.the(t, exp), t)
  ------------------------------ the
  Check(ctx, exp, t)
}
