#!/usr/bin/env node

const { run, test, expect, snapshot, info } = require("@xieyuheng/test-runner")
const changeCase = require("change-case")
const path = require("path")
const fs = require("fs")

let commands = {}

commands.t = async () => {
  await commands.test_lib()
  await commands.test_impression()
  await commands.test_lang0()
  await commands.test_lang1()
  await commands.test_lang2()
  await commands.test_partech()
}

commands.f = async () => {
  commands.test_lib()
  commands.test_impression()
  commands.test_lang0()
  commands.test_lang1()
  commands.test_lang2()
  commands.test_partech()
}

commands.test_lib = async () => {
  await test("node $file", { file: "lib/**/*.test.js" }, expect.ok)
}

commands.test_impression = async () => {
  await test(
    "node $file",
    { file: "lib/**/*.impression.js" },
    snapshot.out(({ file }) =>
      path.resolve("snapshot", changeCase.paramCase(file) + ".out")
    )
  )
}

commands.test_lang0 = async () => {
  await test(
    "./bin/lang0.js $file",
    { file: "tests/lang0/**.cic" },
    snapshot.out(({ file }) => file + ".out")
  )
}

commands.test_lang1 = async () => {
  await test(
    "./bin/lang1.js $file",
    { file: "tests/lang1/**.cic" },
    snapshot.out(({ file }) => file + ".out")
  )

  await test(
    "./bin/lang1.js $file",
    { file: "tests/lang1-error/**.cic" },
    snapshot.err(({ file }) => file + ".err")
  )
}

commands.test_lang2 = async () => {
  await test(
    "./bin/lang2.js $file",
    { file: "tests/lang2/**.cic" },
    snapshot.out(({ file }) => file + ".out")
  )

  await test(
    "./bin/lang2.js $file",
    { file: "tests/lang2-error/**.cic" },
    snapshot.err(({ file }) => file + ".err")
  )
}

commands.test_partech = async () => {
  await commands.test_partech_lex()
  await commands.test_partech_parse()
}

commands.test_partech_lex = async () => {
  await test(
    "./bin/partech.js lex $file --table $file",
    { file: "tests/tables/example.table.yaml" },
    snapshot.out((_) => "tests/tables/example.tokens.json")
  )

  await test(
    "./bin/partech.js lex $file",
    { file: "tests/tables/example.table.yaml" },
    snapshot.out((_) => "tests/tables/default.tokens.json")
  )
}

commands.test_partech_parse = async () => {
  const base = "tests/grammars"

  const dirents = await fs.promises.readdir(base, {
    encoding: "utf8",
    withFileTypes: true,
  })

  for (const dirent of dirents) {
    if (dirent.isDirectory()) {
      const name = dirent.name
      const grammar = path.resolve(base, name + ".grammar.yaml")

      await test(
        `./bin/partech.js parse $file --grammar ${grammar}`,
        { file: `${base}/${name}/**.ok` },
        snapshot.out(({ file }) => file + ".tree")
      )

      await test(
        `./bin/partech.js parse $file --grammar ${grammar} --nocolor`,
        { file: `${base}/${name}/**.oh` },
        snapshot.err(({ file }) => file + ".error")
      )
    }
  }
}

info()

run(commands)
