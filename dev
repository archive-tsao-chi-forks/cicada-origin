#!/usr/bin/env node

const util = require("util")
const child_process = require("child_process")
const exec = util.promisify(child_process.exec)
const process = require("process")
const path = require("path")
const fs = require("fs")
const glob = require("glob")
const Promise = require("bluebird")

let dev = {}

function test_prog(prog, pattern, ext, opts) {
  const results = glob
    .sync(pattern)
    .filter((file) => file.endsWith(ext))
    .map((file) => exec(`${prog} ${file}`).then((the) => ({ ...the, file })))

  return Promise.all(results).then((results) => {
    for (const the of results) {
      console.log(`test_prog:`)
      console.log(`  prog: ${prog}`)
      console.log(`  file: ${the.file}`)

      if (the.stdout && opts && opts.snapshot && opts.snapshot.stdout) {
        console.log(`  snapshot.stdout: ${the.file}${opts.snapshot.stdout}`)
        fs.promises.writeFile(`${the.file}${opts.snapshot.stdout}`, the.stdout)
      }

      if (the.stdout && opts && opts.echo && opts.echo.stdout) {
        console.log()
        console.log(the.stdout)
      }

      if (the.stderr && opts && opts.echo && opts.echo.stderr) {
        console.error()
        console.error(the.stderr)
      }
    }
  })
}

function test_prog_error(prog, pattern, ext, opts) {
  const results = glob
    .sync(pattern)
    .filter((file) => file.endsWith(ext))
    .map((file) =>
      exec(`${prog} ${file}`)
        .then((the) => ({ ...the, file }))
        .catch((error) => ({ ...error, file }))
    )

  return Promise.all(results).then((results) => {
    for (const the of results) {
      console.log(`test_prog_error:`)
      console.log(`  prog: ${prog}`)
      console.log(`  file: ${the.file}`)

      if (the.stdout && opts && opts.snapshot && opts.snapshot.stdout) {
        console.log(`  snapshot.stdout: ${the.file}${opts.snapshot.stdout}`)
        fs.promises.writeFile(`${the.file}${opts.snapshot.stdout}`, the.stdout)
      }

      if (the.stdout && opts && opts.echo && opts.echo.stdout) {
        console.log()
        console.log(the.stdout)
      }

      if (the.stderr && opts && opts.snapshot && opts.snapshot.stderr) {
        console.error(`  snapshot.stderr: ${the.file}${opts.snapshot.stderr}`)
        fs.promises.writeFile(`${the.file}${opts.snapshot.stderr}`, the.stderr)
      }

      if (the.stderr && opts && opts.echo && opts.echo.stderr) {
        console.error()
        console.error(the.stderr)
      }
    }
  })
}

dev["test_lang0"] = () =>
  test_prog("./bin/lang0.js eval", "examples/lang0/**", ".cic", {
    snapshot: { stdout: ".out" },
  })

dev["test_lang1"] = () =>
  test_prog("./bin/lang1.js eval", "examples/lang1/**", ".cic", {
    snapshot: { stdout: ".out" },
  })

dev["test_lang1_error"] = () =>
  test_prog_error("./bin/lang1.js eval", "examples/lang1-error/**", ".cic", {
    snapshot: { stdout: ".out", stderr: ".err" },
  })

dev["test_lang1.1"] = () =>
  test_prog("./bin/lang1.1.js eval", "examples/lang1/**", ".cic", {
    snapshot: { stdout: ".out.1" },
  })

dev["test_lang1.1_error"] = () =>
  test_prog_error("./bin/lang1.1.js eval", "examples/lang1-error/**", ".cic", {
    snapshot: { stdout: ".out.1", stderr: ".err.1" },
  })

dev["test_lib"] = () => test_prog("node", "lib/**", ".test.js")

dev["t"] = () => {
  dev["test_lib"]()
  dev["test_lang0"]()
  dev["test_lang1"]()
  dev["test_lang1_error"]()
  dev["test_lang1.1"]()
  dev["test_lang1.1_error"]()
}

async function main() {
  if (process.argv.length <= 2) {
    for (const name of Object.keys(dev)) {
      console.log(name)
    }
  }

  const commands = process.argv.slice(2)
  Promise.each(commands, (command) => dev[command]())
}

main()
