// 4. Easy as Pie

@def pair_elim: (
  A: Type, D: Type, X: Type,
  pair: (A * D),
  maker: (A, D) -> X,
) -> X =
  (A, D, X, pair, maker) => maker(car(pair), cdr(pair))

@def flip: (
  A: Type, D: Type, pair: (A * D)
) -> (D * A) =
  (A, D, pair) => cons(cdr(pair), car(pair))

@show flip(Nat, String, cons(123, "abc"))
@show flip(String, Nat, flip(Nat, String, cons(123, "abc")))

@show
@the Equal(
  Type,
  (A D: Type, pair: (A * D)) -> (D * A),
  (Lemon Meringue: Type, (Lemon * Meringue)) -> (Meringue * Lemon))
same

@show
@the Equal(
  Type,
  (A: Type, D: Type, (A * D)) -> (D * A),
  (A: Type, D: Type,
    (car(@the (Type * Type) cons(A, D)) *
     cdr(@the (Type * Type) cons(A, D)))
  ) -> (D * A))
same

@def swap: ((Nat * String)) -> (String * Nat) =
  (pair) => pair_elim(
    Nat, String, (String * Nat), pair,
    (a, d) => cons(d, a))

@show swap(cons(123, "abc"))

@def twin: (X: Type, X) -> (X * X) =
  (X, x) => cons(x, x)

@show twin(Nat, 123)
@show twin(String, "abc")
