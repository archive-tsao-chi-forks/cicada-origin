// 5. Lists, Lists, and More Lists

@def expectations: List(String) = @li [
  "cooked",
  "eaten",
  "tried-cleaning",
  "understood",
  "slept"
]

@show expectations

@show List(String)
@show @the List(String) nil
@show @the List(Nat) nil
@show @the List(List(String)) nil

@fn step_length(E: Type, head: E, tail: List(E), almost: Nat): Nat =
  add1(almost)

@fn length(E: Type, x: List(E)): Nat =
  list_ind(x, (_) => Nat, 0, step_length(E))

@show length(String, expectations)

@def append_t: Type =
  (E: Type, List(E), List(E)) -> List(E)

@def step_append_t: Type =
  (E: Type, head: E, tail: List(E), almost: List(E)) -> List(E)
