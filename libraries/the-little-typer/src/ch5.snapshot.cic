// 5. Lists, Lists, and More Lists

@def expectations
@the List(String)
@li "cooked"
@li "eaten"
@li "tried-cleaning"
@li "understood"
@li "slept"
@nil

@show expectations

@def nat_rec_t
@the Type (
  T: Type,
  target: Nat,
  base: T,
  step: (prev: Nat, almost: T) -> T,
) -> T

@show nat_rec_t

@def list_rec_t
@the Type (
  E: Type,
  target: List(E),
  T: Type,
  base: T,
  step: (head: E, tail: List(E), almost: T) -> T,
) -> T

@show list_rec_t

@def step_length_t
@the Type (E: Type) -> (head: E, tail: List(E), almost: Nat) -> Nat

@def step_length
@the step_length_t
(E) => (e, es, almost) => add1(almost)

@def length_t
@the Type (E: Type) -> (List(E)) -> Nat

@def length
@the length_t
(E) => (x) => list_ind(x, (_) => Nat, 0, step_length(E))

@show
length(String, expectations)

@def append_t
@the Type (E: Type) -> (List(E), List(E)) -> List(E)

@def step_append_t
@the Type (E: Type) -> (head: E, tail: List(E), almost: List(E)) -> List(E)
