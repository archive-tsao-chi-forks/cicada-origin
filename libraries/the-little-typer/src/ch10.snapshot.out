the Type (bread: String) * Equal(String, bread, "bagel")
the (bread: String) * Equal(String, bread, "bagel") cons("bagel", same)
the Type (T: Type) * T
the (T: Type) * T cons(Nat, 1)
the (T: Type) * T cons(String, "a")
the (T: Type) * T cons((_: Nat) -> Nat, (_) => add1(add1(add1(add1(add1(add1(_)))))))
the (food: String) * Equal(List(String), li(food, nil), li("toast", nil)) cons("toast", same)
the (length: Nat) * Vector(String, length) cons(6, vec("pea", vec("pea", vec("pea", vec("pea", vec("pea", vec("pea", vecnil)))))))
the (length: Nat) * Vector(String, length) cons(2, vec("toast-and-jam", vec("tea", vecnil)))
the Type (_: Equal(Nat, 2, 3)) * Equal(String, "apple", "apple")
the (list: List(String)) * Equal(List(String), list, list_ind(list, (target_list) => List(String), nil, (head) => (tail) => (almost) => list_ind(almost, (target_list) => List(String), li(head, nil), (head1) => (tail1) => (almost1) => li(head1, almost1)))) cons(nil, same)
the (list: List(String)) * Equal(List(String), list, list_ind(list, (target_list) => List(String), nil, (head) => (tail) => (almost) => list_ind(almost, (target_list) => List(String), li(head, nil), (head1) => (tail1) => (almost1) => li(head1, almost1)))) cons(li("S", li("O", li("S", nil))), same)
the (list: List(String)) * Equal(List(String), list, list_ind(list, (target_list) => List(String), nil, (head) => (tail) => (almost) => list_ind(almost, (target_list) => List(String), li(head, nil), (head1) => (tail1) => (almost1) => li(head1, almost1)))) cons(li("A", li("B", li("B", li("A", nil)))), same)
the (list: List(String)) * Equal(List(String), list_ind(list, (target_list) => List(String), li("grape", nil), (head) => (tail) => (almost) => li(head, almost)), li("grape", list)) cons(nil, same)
the (list: List(String)) * Equal(List(String), list_ind(list, (target_list) => List(String), li("grape", nil), (head) => (tail) => (almost) => li(head, almost)), li("grape", list)) cons(li("grape", nil), same)
the (list: List(String)) * Equal(List(String), list_ind(list, (target_list) => List(String), li("grape", nil), (head) => (tail) => (almost) => li(head, almost)), li("grape", list)) cons(li("grape", li("grape", nil)), same)
the Vector(String, 6) vec("hi", vec("hi", vec("hi", vec("hi", vec("hi", vec("hi", vecnil))))))
the Vector(Nat, 0) vecnil
the Vector(Nat, 1) vec(1, vecnil)
the Vector(Nat, 2) vec(1, vec(2, vecnil))
the Vector(Nat, 3) vec(1, vec(2, vec(3, vecnil)))
