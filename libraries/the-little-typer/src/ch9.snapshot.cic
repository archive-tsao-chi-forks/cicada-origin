// 9. Double Your Money, Get Twice as Much

def add(x: Nat, y: Nat): Nat = nat_rec(x, y, (_prev, almost) => add1(almost))

// NOTE increase
def incr(x: Nat): Nat = nat_rec(x, 1, (_prev, almost) => add(1, almost))

the Equal(Nat, incr(3), add1(3)) same

def replace_t: Type = (
  X: Type,
  from to: X,
  target: Equal(X, from, to),
  motive: (X) -> Type,
  base: motive(from),
) -> motive(to)

def incr_add1_equal_motive(n: Nat): Type = Equal(Nat, incr(n), add1(n))
def incr_add1_equal_base: Equal(Nat, incr(zero), add1(zero)) = same
def incr_add1_equal_step_t: Type = (
  prev: Nat,
  almost: Equal(Nat, incr(prev), add1(prev))
) -> Equal(Nat, add1(incr(prev)), add1(add1(prev)))

def incr_add1_equal_step(
  prev: Nat,
  almost: Equal(Nat, incr(prev), add1(prev))
): Equal(Nat, add1(incr(prev)), add1(add1(prev))) =
  let motive = the (n: Nat) -> Type
    (n) => Equal(Nat, add1(incr(prev)), add1(n))
  let base = the Equal(Nat, add1(incr(prev)), add1(incr(prev))) same
  replace(almost, motive, base)

def incr_add1_equal(n: Nat): Equal(Nat, incr(n), add1(n)) =
  nat_ind(
    n,
    incr_add1_equal_motive,
    incr_add1_equal_base,
    incr_add1_equal_step)

incr_add1_equal(0)
incr_add1_equal(1)
incr_add1_equal(2)
incr_add1_equal(3)
