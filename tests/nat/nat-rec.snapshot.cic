@def nat_rec: (
  target: Nat,
  T: Type,
  base: T,
  step: (prev: Nat, almost: T) -> T,
) -> T =
  (target, T, base, step) => nat_ind(target, (_) => T, base, step)

@def add: (Nat, Nat) -> Nat =
  (x, y) => nat_rec(y, Nat, x, (prev, almost) => add1(almost))

@def mul: (Nat, Nat) -> Nat =
  (x, y) => nat_rec(y, Nat, 0, (prev, almost) => add(almost, x))

@def pow: (Nat, Nat) -> Nat =
  (x, y) => nat_rec(y, Nat, 1, (prev, almost) => mul(almost, x))

@def eight =
@let four add(2, 2)
add(four, four)

@show @the Equal(Nat, eight, pow(2, 3)) same
