// 2. Doin' What Comes Naturally

{
  flavored_lentils : (String) -> Pair(String, String)
  flavored_lentils = (flavor) => cons(flavor, "lentils")

  garlic_flavored_lentils : Pair(String, String)
  garlic_flavored_lentils = flavored_lentils("garlic")

  id : (String) -> String
  id = (x) => x

  T : Type
  T = Pair(String, (String) -> String)

  id_in_pair : (x: String) -> T
  id_in_pair = (x) => cons(x, (x) => x)

  _ : T
  _ = id_in_pair("x")

  // The x occur in `(x) => x` should not be
  // effected by the substitution of outer `x`,
  // and `(x) => x` is equivalent to `(y) => y`,

  _ : Equal(T, id_in_pair("x"), cons("x", (y) => y))
  _ = same

  _ : Equal((Nat) -> Pair(Nat, Nat), (x) => cons(x, x), (y) => cons(y, y))
  _ = same

  _ : Equal((Nat) -> Nat, (y) => car(cons(y, y): Pair(Nat, Nat)), (x) => x)
  _ = same

  _ : Equal((Pair(Nat, Nat)) -> Nat, (y) => car(y), (x) => car(x))
  _ = same

  vegetables : Pair(String, String)
  vegetables = cons("celery", "carrot")

  _ : Equal(Pair(String, String), vegetables, cons(car(vegetables), cdr(vegetables)))
  _ = same

  rec_Nat : (T: Type) -> (target: Nat) -> (base: T) -> (step: (prev: Nat) -> (almost: T) -> T) -> T
  rec_Nat = (T) => (target) => (base) => (step) => Nat.ind(target, (_) => T, base, step)

  which_Nat : (T: Type) -> (target: Nat) -> (base: T) -> (step: (prev: Nat) -> T) -> T
  which_Nat = (T) => (target) => (base) => (step) => Nat.ind(target, (_) => T, base, (prev) => (almost) => step(prev))

  _ : String
  _ = which_Nat(String)(0)("naught")((prev) => "more")

  _
}
