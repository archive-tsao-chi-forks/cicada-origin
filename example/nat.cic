class nat_t {}
class zero_t {}
class succ_t { given prev : nat_t }

function succ {
  given x : nat_t
  conclude succ_t
  return {
    let prev = x
  }
}

let zero = {}
let one = succ(zero)
let two = { let prev = one }
let three = succ(two)
let four = succ(three)
let five = succ(four)
let six = succ(five)

function nat_add {
  given x : nat_t
  given y : nat_t
  conclude nat_t
  return switch x {
    case succ_t => succ(nat_add(x.prev, y))
    case zero_t => y
  }
}

function nat_mul {
  given x : nat_t
  given y : nat_t
  conclude nat_t
  return switch x {
    case succ_t => nat_add(y, nat_mul(x.prev, y))
    case zero_t => zero
  }
}

function add1 {
  given x : nat_t
  conclude succ_t
  return {
    let prev = x
  }
}

function add2 {
  given x : nat_t
  conclude succ_t
  return add1(add1(x))
}

@eq add2(zero).prev = one
@eq one.prev = zero

@accept one : succ_t(zero)
@refuse zero : succ_t(zero)
@refuse zero : succ_t(zero)
@refuse zero : succ_t
@refuse zero : succ_t

@eq nat_add(zero, zero) = zero
@eq nat_add(one, zero) = one
@eq nat_add(zero, one) = one
@eq nat_add(one, two) = three
@eq nat_add(two, one) = three
@eq nat_add(two, two) = four
@eq nat_add(two, three) = five
@eq nat_add(three, two) = five

@eq nat_mul(zero, zero) = zero
@eq nat_mul(one, zero) = zero
@eq nat_mul(zero, one) = zero
@eq nat_mul(one, two) = two
@eq nat_mul(two, one) = two
@eq nat_mul(two, two) = four
@eq nat_mul(two, three) = six
@eq nat_mul(three, two) = six
