class unit_t {}
object unit {}

class nat_t {}
class zero_t {}
class succ_t { given prev : nat_t }

function succ {
  given x : nat_t
  conclude succ_t
  return {
    let prev = x
  }
}

let zero = {}
let one = succ(zero)
let two = succ(one)
let three = succ(two)
let four = succ(three)
let five = succ(four)

class list_t { given A : type }
class null_t { given A : type }
class cons_t {
  given A : type
  given car : A
  given cdr : list_t(A)
}

define unit_null : null_t(unit_t) = { let A = unit_t }

let cons_unit_list = {
  given unit_list : list_t(unit_t)
  return {
    let A = unit_t
    let car = unit
    let cdr = unit_list
  }
}

@show cons_unit_list(cons_unit_list(unit_null))

function list_length {
  given list : list_t
  conclude nat_t
  return switch list {
    case cons_t => succ(list_length(list.cdr))
    case null_t => zero
  }
}

@equal list_length(unit_null) = zero
@equal list_length(cons_unit_list(unit_null)) = one
@equal list_length(cons_unit_list(cons_unit_list(unit_null))) = two
