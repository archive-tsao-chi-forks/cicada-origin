class unit_t {}
object unit {}

class nat_t {}
class zero_t {}
class succ_t { given prev : nat_t }

function succ {
  given x : nat_t
  conclude succ_t
  return {
    let prev = x
  }
}

let zero = {}
let one = succ(zero)
let two = succ(one)
let three = succ(two)
let four = succ(three)
let five = succ(four)

class list_t { given A : type }
class null_t { given A : type }
class cons_t {
  given A : type
  given car : A
  given cdr : list_t(A)
}

define unit_null : null_t(unit_t) = { let A = unit_t }

let cons_unit_list = {
  given unit_list : list_t(unit_t)
  return {
    let A = unit_t
    let car = unit
    let cdr = unit_list
  }
}

function list_length {
  given x : list_t
  conclude nat_t
  return switch x {
    case cons_t => succ(list_length(x.cdr))
    case null_t => zero
  }
}

@eq list_length(unit_null) = zero
@eq list_length(cons_unit_list(unit_null)) = one
@eq list_length(cons_unit_list(cons_unit_list(unit_null))) = two

function list_append {
  given A : type
  given x : list_t(A)
  given y : list_t(A)
  conclude list_t(A)
  return switch x {
    case cons_t(A) => {
      let A = A
      let car = x.car
      let cdr = list_append(A, x.cdr, y)
    }
    case null_t(A) => y
  }
}

@eq list_append(unit_t, unit_null, unit_null) = unit_null
@eq list_append(unit_t, cons_unit_list(unit_null), unit_null) = cons_unit_list(unit_null)
@eq list_append(unit_t, unit_null, cons_unit_list(unit_null)) = cons_unit_list(unit_null)
@eq list_append(unit_t, cons_unit_list(unit_null), cons_unit_list(unit_null))
  = cons_unit_list(cons_unit_list(unit_null))

define one_null : null_t(succ_t) = { let A = succ_t }

let cons_one_list = {
  given one_list : list_t(succ_t)
  return {
    let A = succ_t
    let car = one
    let cdr = one_list
  }
}

// function f {
//   given unit: unit_t
//   conclude list_t(union { case succ_t case unit_t })
//   return list_append(
//     union { case succ_t case unit_t },
//     cons_unit_list(unit_null),
//     cons_one_list(one_null))
// }
