class nat_t {}
class zero_t {}
class succ_t { given prev : nat_t }

let zero = {}
let one = { let prev = zero }
let two = { let prev = one }
let three = { let prev = two }

class vector_t {
  given A : type
  given length : nat_t
}

class vector_null_t {
  given A : type
  given length : zero_t
}

class vector_cons_t {
  given A : type
  given prev : nat_t
  given head : A
  given length : succ_t(prev)
  given tail : vector_t(A, prev)
}

define zero_zeros : vector_t = {
  let A = nat_t
  let length = zero
}

define one_zeros : vector_cons_t = {
  let A = nat_t
  let prev = zero
  let head = zero
  let length = one
  let tail = zero_zeros
}

function vector_length {
  given vector : vector_t
  conclude nat_t
  return vector.length
}

@eq one_zeros.length
  = vector_length(one_zeros)
