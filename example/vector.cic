class nat_t {}
class zero_t {}
class succ_t { given prev : nat_t }

let zero = object {}
let one = succ_t(zero)
let two = succ_t(one)
let three = succ_t(two)

class vector_t {
  given A : type
  given length : nat_t
}
class vector_null_t {
  given A : type
  given length : zero_t
}
class vector_cons_t {
  given A : type
  given prev : nat_t
  given head : A
  given length : succ_t(prev)
  given tail : vector_t(A, prev)
}
// define one2 : succ_t(zero) = one
// define zero_zeros : vector_t = vector_null_t(nat_t, zero)
// define one_zeros : vector_cons_t = {
//   let A = nat_t
//   let prev = zero
//   let head = zero
//   let length = one
//   let tail = zero_zeros
// }
